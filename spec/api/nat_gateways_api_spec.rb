=begin
#CLOUD API

#An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.

The version of the OpenAPI document: 6.0-SDK.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Ionoscloud::NATGatewaysApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NATGatewaysApi' do
  before do
    # run before each test
    @api_instance = Ionoscloud::NATGatewaysApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NATGatewaysApi' do
    it 'should create an instance of NATGatewaysApi' do
      expect(@api_instance).to be_instance_of(Ionoscloud::NATGatewaysApi)
    end
  end

  # unit tests for datacenters_natgateways_delete
  # Remove a NAT gateway
  # Removes the specified NAT gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [nil]
  describe 'datacenters_natgateways_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_find_by_nat_gateway_id
  # Retrieve a NAT gateway
  # Retrieves the attributes of a given NAT gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGateway]
  describe 'datacenters_natgateways_find_by_nat_gateway_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_flowlogs_delete
  # Remove Flow Log from NAT Gateway
  # This will remove a flow log from the NAT gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param flow_log_id The unique ID of the flow log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [nil]
  describe 'datacenters_natgateways_flowlogs_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_flowlogs_find_by_flow_log_id
  # Retrieve a Flow Log of the NAT Gateway
  # This will return a Flow Log of the NAT Gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param flow_log_id The unique ID of the flow log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_natgateways_flowlogs_find_by_flow_log_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_flowlogs_get
  # List NAT Gateway Flow Logs
  # You can retrieve a list of Flow Logs of the NAT Gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :offset the first element (of the total list of elements) to include in the response (use together with limit for pagination)
  # @option opts [Integer] :limit the maximum number of elements to return (use together with offset for pagination)
  # @return [FlowLogs]
  describe 'datacenters_natgateways_flowlogs_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_flowlogs_patch
  # Partially modify a Flow Log of the NAT Gateway
  # You can use to partially update a Flow Log of a NAT Gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param flow_log_id The unique ID of the flow log
  # @param nat_gateway_flow_log_properties Properties of a Flow Log to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_natgateways_flowlogs_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_flowlogs_post
  # Add a NAT Gateways Flow Log
  # This will add a new Flow Log to the NAT Gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_flow_log Flow Log to add on NAT Gateway
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_natgateways_flowlogs_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_flowlogs_put
  # Modify a Flow Log of the NAT Gateway
  # You can use to update a Flow Log of the NAT Gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param flow_log_id The unique ID of the flow log
  # @param nat_gateway_flow_log Modified NAT Gateway Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_natgateways_flowlogs_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_get
  # List NAT Gateways
  # Retrieve a list of NAT Gateways within the datacenter.
  # @param datacenter_id The unique ID of the datacenter
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGateways]
  describe 'datacenters_natgateways_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_patch
  # Partially update a NAT gateway
  # Partially update the attributes of a given NAT gateway
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_properties NAT gateway properties to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGateway]
  describe 'datacenters_natgateways_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_post
  # Create a NAT Gateway
  # Creates a NAT Gateway within the datacenter. User should be the contract owner or a admin or a user with createInternetAccess privilege
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway NAT gateway to be created
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGateway]
  describe 'datacenters_natgateways_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_put
  # Update a NAT gateway
  # Update the attributes of a given NAT gateway
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway Modified NAT Gateway
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @option opts [Integer] :offset the first element (of the total list of elements) to include in the response (use together with limit for pagination)
  # @option opts [Integer] :limit the maximum number of elements to return (use together with offset for pagination)
  # @return [NatGateway]
  describe 'datacenters_natgateways_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_rules_delete
  # Remove rule from NAT Gateway
  # This will remove a rule from the NAT gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_rule_id The unique ID of the NAT gateway rule
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [nil]
  describe 'datacenters_natgateways_rules_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_rules_find_by_nat_gateway_rule_id
  # Retrieve a NAT Gateway Rule
  # Retrieves the attributes of a given NAT gateway rule.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_rule_id The unique ID of the NAT gateway rule
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGatewayRule]
  describe 'datacenters_natgateways_rules_find_by_nat_gateway_rule_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_rules_get
  # List NAT Gateways Rules
  # Retrieve a list of rules of a NAT Gateway within the datacenter.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGatewayRules]
  describe 'datacenters_natgateways_rules_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_rules_patch
  # Partially modify a rule of the NAT gateway
  # You can use to partially update a rule of a NAT gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_rule_id The unique ID of the NAT gateway rule
  # @param nat_gateway_rule_properties Properties of a NAT gateway rule to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGatewayRule]
  describe 'datacenters_natgateways_rules_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_rules_post
  # Create a NAT Gateway Rule
  # Creates a rule within the NAT Gateway of a datacenter.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_rule NAT gateway rule to be created
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGatewayRule]
  describe 'datacenters_natgateways_rules_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_natgateways_rules_put
  # Modify a rule of the NAT gateway
  # You can use to update a rule of the NAT gateway.
  # @param datacenter_id The unique ID of the datacenter
  # @param nat_gateway_id The unique ID of the NAT gateway
  # @param nat_gateway_rule_id The unique ID of the NAT gateway rule
  # @param nat_gateway_rule Modified NAT Gateway Rule
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NatGatewayRule]
  describe 'datacenters_natgateways_rules_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
