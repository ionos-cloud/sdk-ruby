=begin
#CLOUD API

#An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.

The version of the OpenAPI document: 6.0-SDK.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Ionoscloud::NetworkLoadBalancersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NetworkLoadBalancersApi' do
  before do
    # run before each test
    @api_instance = Ionoscloud::NetworkLoadBalancersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NetworkLoadBalancersApi' do
    it 'should create an instance of NetworkLoadBalancersApi' do
      expect(@api_instance).to be_instance_of(Ionoscloud::NetworkLoadBalancersApi)
    end
  end

  # unit tests for datacenters_networkloadbalancers_delete
  # Remove an Network Load Balancer
  # Removes the specified Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [nil]
  describe 'datacenters_networkloadbalancers_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_find_by_network_load_balancer_id
  # Retrieve an Network Load Balancer
  # Retrieves the attributes of a given Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancer]
  describe 'datacenters_networkloadbalancers_find_by_network_load_balancer_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_flowlogs_delete
  # Remove Flow Log from Network Load Balancer
  # This will remove a flow log from the network load balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param flow_log_id The unique ID of the flow log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [nil]
  describe 'datacenters_networkloadbalancers_flowlogs_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_flowlogs_find_by_flow_log_id
  # Retrieve a Flow Log of the Network Load Balancer
  # This will return a Flow Log of the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param flow_log_id The unique ID of the Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [FlowLog]
  describe 'datacenters_networkloadbalancers_flowlogs_find_by_flow_log_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_flowlogs_get
  # List Network Load Balancer Flow Logs
  # You can retrieve a list of Flow Logs of the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [FlowLogs]
  describe 'datacenters_networkloadbalancers_flowlogs_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_flowlogs_patch
  # Partially modify a Flow Log of the Network Load Balancer
  # You can use to partially update a Flow Log of a Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param flow_log_id The unique ID of the Flow Log
  # @param network_load_balancer_flow_log_properties Properties of a Flow Log to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [FlowLog]
  describe 'datacenters_networkloadbalancers_flowlogs_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_flowlogs_post
  # Add a Network Load Balancer Flow Log
  # This will add a new Flow Log to the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param network_load_balancer_flow_log Flow Log to add
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [FlowLog]
  describe 'datacenters_networkloadbalancers_flowlogs_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_flowlogs_put
  # Modify a Flow Log of the Network Load Balancer
  # You can use to update a Flow Log of the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param flow_log_id The unique ID of the Flow Log
  # @param network_load_balancer_flow_log Modified Network Load Balancer Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [FlowLog]
  describe 'datacenters_networkloadbalancers_flowlogs_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_forwardingrules_delete
  # Remove Forwarding Rule from Network Load Balancer
  # This will remove a forwarding rule from the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param forwarding_rule_id The unique ID of the forwarding rule
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [nil]
  describe 'datacenters_networkloadbalancers_forwardingrules_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_forwardingrules_find_by_forwarding_rule_id
  # Retrieve a Forwarding Rule of the Network Load Balancer
  # This will a forwarding rule of the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param forwarding_rule_id The unique ID of the forwarding rule
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancerForwardingRule]
  describe 'datacenters_networkloadbalancers_forwardingrules_find_by_forwarding_rule_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_forwardingrules_get
  # List Network Load Balancer Forwarding Rules
  # You can retrieve a list of forwarding rules of the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancerForwardingRules]
  describe 'datacenters_networkloadbalancers_forwardingrules_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_forwardingrules_patch
  # Partially modify a forwarding rule of the Network Load Balancer
  # You can use to partially update a forwarding rule of a Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param forwarding_rule_id The unique ID of the forwarding rule
  # @param network_load_balancer_forwarding_rule_properties Properties of a forwarding rule to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancerForwardingRule]
  describe 'datacenters_networkloadbalancers_forwardingrules_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_forwardingrules_post
  # Add a Network Load Balancer Forwarding Rule
  # This will add a new forwarding rule to the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param network_load_balancer_forwarding_rule forwarding rule to add
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancerForwardingRule]
  describe 'datacenters_networkloadbalancers_forwardingrules_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_forwardingrules_put
  # Modify a forwarding rule of the Network Load Balancer
  # You can use to update a forwarding rule of the Network Load Balancer.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param forwarding_rule_id The unique ID of the forwarding rule
  # @param network_load_balancer_forwarding_rule Modified Network Load Balancer Forwarding Rule
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancerForwardingRule]
  describe 'datacenters_networkloadbalancers_forwardingrules_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_get
  # List Network Load Balancers
  # Retrieve a list of Network Load Balancers within the datacenter.
  # @param datacenter_id The unique ID of the datacenter
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @option opts [Integer] :offset the first element (of the total list of elements) to include in the response (use together with limit for pagination)
  # @option opts [Integer] :limit the maximum number of elements to return (use together with offset for pagination)
  # @return [NetworkLoadBalancers]
  describe 'datacenters_networkloadbalancers_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_patch
  # Partially update an Network Load Balancer
  # Partially update the attributes of a given Network Load Balancer
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param network_load_balancer_properties Network Load Balancer properties to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancer]
  describe 'datacenters_networkloadbalancers_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_post
  # Create an Network Load Balancer
  # Creates an Network Load Balancer within the datacenter.
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer Network Load Balancer to be created
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @return [NetworkLoadBalancer]
  describe 'datacenters_networkloadbalancers_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_networkloadbalancers_put
  # Update an Network Load Balancer
  # Update the attributes of a given Network Load Balancer
  # @param datacenter_id The unique ID of the datacenter
  # @param network_load_balancer_id The unique ID of the Network Load Balancer
  # @param network_load_balancer Modified Network Load Balancer
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users having more than 1 contract need to provide contract number, against which all API requests should be executed
  # @option opts [Integer] :offset the first element (of the total list of elements) to include in the response (use together with limit for pagination)
  # @option opts [Integer] :limit the maximum number of elements to return (use together with offset for pagination)
  # @return [NetworkLoadBalancer]
  describe 'datacenters_networkloadbalancers_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
