=begin
#CLOUD API

#An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.

The version of the OpenAPI document: 6.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Ionoscloud::FlowLogsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FlowLogsApi' do
  before do
    # run before each test
    @api_instance = Ionoscloud::FlowLogsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FlowLogsApi' do
    it 'should create an instance of FlowLogsApi' do
      expect(@api_instance).to be_instance_of(Ionoscloud::FlowLogsApi)
    end
  end

  # unit tests for datacenters_servers_nics_flowlogs_delete
  # Delete a Flow Log
  # Removes the specified Flow Log.
  # @param datacenter_id The unique ID of the datacenter
  # @param server_id The unique ID of the Server
  # @param nic_id The unique ID of the NIC
  # @param flowlog_id The unique ID of the Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [Object]
  describe 'datacenters_servers_nics_flowlogs_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_servers_nics_flowlogs_find_by_id
  # Retrieve a Flow Log
  # Retrieves the attributes of a given Flow Log.
  # @param datacenter_id The unique ID of the datacenter
  # @param server_id The unique ID of the Server
  # @param nic_id The unique ID of the NIC
  # @param flowlog_id The unique ID of the Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_servers_nics_flowlogs_find_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_servers_nics_flowlogs_get
  # List Flow Logs
  # Retrieves a list of Flow Logs associated with a particular network interface.
  # @param datacenter_id The unique ID of the datacenter
  # @param server_id The unique ID of the Server
  # @param nic_id The unique ID of the NIC
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @option opts [Integer] :offset the first element (of the total list of elements) to include in the response (use together with limit for pagination)
  # @option opts [Integer] :limit the maximum number of elements to return (use together with offset for pagination)
  # @return [FlowLogs]
  describe 'datacenters_servers_nics_flowlogs_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_servers_nics_flowlogs_patch
  # Partially update a Flow Log
  # This will partially update a Flow Log record.
  # @param datacenter_id The unique ID of the datacenter
  # @param server_id The unique ID of the server
  # @param nic_id The unique ID of the NIC
  # @param flowlog_id The unique ID of the Flow Log
  # @param flowlog Modified Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_servers_nics_flowlogs_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_servers_nics_flowlogs_post
  # Create a Flow Log
  # This will add a Flow Log to the network interface.
  # @param datacenter_id The unique ID of the datacenter
  # @param server_id The unique ID of the server
  # @param nic_id The unique ID of the NIC
  # @param flowlog Flow Log to be created
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_servers_nics_flowlogs_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_servers_nics_flowlogs_put
  # Modify a Flow Log
  # This will update a Flow Log record.
  # @param datacenter_id The unique ID of the datacenter
  # @param server_id The unique ID of the server
  # @param nic_id The unique ID of the NIC
  # @param flowlog_id The unique ID of the Flow Log
  # @param flowlog Modified Flow Log
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether response is pretty-printed (with indentation and new lines)
  # @option opts [Integer] :depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on
  # @return [FlowLog]
  describe 'datacenters_servers_nics_flowlogs_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
