=begin
#CLOUD API

#IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

The version of the OpenAPI document: 6.0-SDK.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Ionoscloud::DataCentersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DataCentersApi' do
  before do
    # run before each test
    @api_instance = Ionoscloud::DataCentersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DataCentersApi' do
    it 'should create an instance of DataCentersApi' do
      expect(@api_instance).to be_instance_of(Ionoscloud::DataCentersApi)
    end
  end

  # unit tests for datacenters_delete
  # Delete data centers
  # Remove the specified data center and all the elements it contains. This is method is destructive and should be used carefully.
  # @param datacenter_id The unique ID of the data center.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether the response is pretty-printed (with indentations and new lines).
  # @option opts [Integer] :depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
  # @return [nil]
  describe 'datacenters_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_find_by_id
  # Retrieve data centers
  # Retrieve data centers by resource ID. This value is in the response body when the data center is created, and in the list of the data centers, returned by GET.
  # @param datacenter_id The unique ID of the data center.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether the response is pretty-printed (with indentations and new lines).
  # @option opts [Integer] :depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
  # @return [Datacenter]
  describe 'datacenters_find_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_get
  # List your data centers
  # List the data centers for your account. Default limit is the first 100 items; use pagination query parameters for listing more items.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether the response is pretty-printed (with indentations and new lines).
  # @option opts [Integer] :depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
  # @option opts [Integer] :offset The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
  # @option opts [Integer] :limit The maximum number of elements to return (use together with offset for pagination).
  # @return [Datacenters]
  describe 'datacenters_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_patch
  # Partially modify data centers
  # Update data centers, rename them, or change their descriptions.
  # @param datacenter_id The unique ID of the data center.
  # @param datacenter The modified properties of the data center.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether the response is pretty-printed (with indentations and new lines).
  # @option opts [Integer] :depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
  # @return [Datacenter]
  describe 'datacenters_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_post
  # Create data centers
  # Create new data centers, and data centers that already contain elements, such as servers and storage volumes, with this POST method.  Virtual data centers are the foundation of the platform; they act as logical containers for all other objects you create, such as servers and storage volumes. You can provision as many data centers as needed. Data centers have their own private networks and are logically segmented from each other to create isolation.
  # @param datacenter The data center to be created.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether the response is pretty-printed (with indentations and new lines).
  # @option opts [Integer] :depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
  # @return [Datacenter]
  describe 'datacenters_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for datacenters_put
  # Modify data centers
  # Update data centers, rename them, or change their descriptions.
  # @param datacenter_id The unique ID of the data center.
  # @param datacenter The modified data center.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :pretty Controls whether the response is pretty-printed (with indentations and new lines).
  # @option opts [Integer] :depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on
  # @option opts [Integer] :x_contract_number Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
  # @return [Datacenter]
  describe 'datacenters_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
