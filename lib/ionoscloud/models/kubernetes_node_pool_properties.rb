=begin
#CLOUD API

#IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.

The version of the OpenAPI document: 6.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'date'
require 'time'

module Ionoscloud
  class KubernetesNodePoolProperties
  
    # The annotations attached to the node pool.
    attr_accessor :annotations


    attr_accessor :auto_scaling


    # The availability zone in which the target VM should be provisioned.
    attr_accessor :availability_zone


    # The list of available versions for upgrading the node pool.
    attr_accessor :available_upgrade_versions


    # The total number of cores for the nodes.
    attr_accessor :cores_count


    # The CPU type for the nodes.
    attr_accessor :cpu_family


    # The unique identifier of the VDC where the worker nodes of the node pool are provisioned.Note that the data center is located in the exact place where the parent cluster of the node pool is located.
    attr_accessor :datacenter_id


    # The Kubernetes version running in the node pool. Note that this imposes restrictions on which Kubernetes versions can run in the node pools of a cluster. Also, not all Kubernetes versions are suitable upgrade targets for all earlier versions.
    attr_accessor :k8s_version


    # The labels attached to the node pool.
    attr_accessor :labels


    # The array of existing private LANs to attach to worker nodes.
    attr_accessor :lans


    attr_accessor :maintenance_window


    # A Kubernetes node pool name. Valid Kubernetes node pool name must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
    attr_accessor :name


    # The number of worker nodes of the node pool.
    attr_accessor :node_count


    # Optional array of reserved public IP addresses to be used by the nodes. The IPs must be from the exact location of the node pool's data center. If autoscaling is used, the array must contain one more IP than the maximum possible number of nodes (nodeCount+1 for a fixed number of nodes or maxNodeCount+1). The extra IP is used when the nodes are rebuilt.
    attr_accessor :public_ips


    # The RAM size for the nodes. Must be specified in multiples of 1024 MB, with a minimum size of 2048 MB.
    attr_accessor :ram_size


    # The allocated volume size in GB. The allocated volume size in GB. To achieve good performance, we recommend a size greater than 100GB for SSD.
    attr_accessor :storage_size


    # The storage type for the nodes.
    attr_accessor :storage_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'annotations' => :'annotations',

        :'auto_scaling' => :'autoScaling',

        :'availability_zone' => :'availabilityZone',

        :'available_upgrade_versions' => :'availableUpgradeVersions',

        :'cores_count' => :'coresCount',

        :'cpu_family' => :'cpuFamily',

        :'datacenter_id' => :'datacenterId',

        :'k8s_version' => :'k8sVersion',

        :'labels' => :'labels',

        :'lans' => :'lans',

        :'maintenance_window' => :'maintenanceWindow',

        :'name' => :'name',

        :'node_count' => :'nodeCount',

        :'public_ips' => :'publicIps',

        :'ram_size' => :'ramSize',

        :'storage_size' => :'storageSize',

        :'storage_type' => :'storageType'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        
        :'annotations' => :'Hash<String, String>',

        :'auto_scaling' => :'KubernetesAutoScaling',

        :'availability_zone' => :'String',

        :'available_upgrade_versions' => :'Array<String>',

        :'cores_count' => :'Integer',

        :'cpu_family' => :'String',

        :'datacenter_id' => :'String',

        :'k8s_version' => :'String',

        :'labels' => :'Hash<String, String>',

        :'lans' => :'Array<KubernetesNodePoolLan>',

        :'maintenance_window' => :'KubernetesMaintenanceWindow',

        :'name' => :'String',

        :'node_count' => :'Integer',

        :'public_ips' => :'Array<String>',

        :'ram_size' => :'Integer',

        :'storage_size' => :'Integer',

        :'storage_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        
















      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Ionoscloud::KubernetesNodePoolProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Ionoscloud::KubernetesNodePoolProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }
      

      if attributes.key?(:'annotations') && (value = attributes[:'annotations']).is_a?(Hash)
        self.annotations = value
      end


      if attributes.key?(:'auto_scaling')
        self.auto_scaling = attributes[:'auto_scaling']
      end


      if attributes.key?(:'availability_zone')
        self.availability_zone = attributes[:'availability_zone']
      end


      if attributes.key?(:'available_upgrade_versions') && (value = attributes[:'available_upgrade_versions']).is_a?(Array)
        self.available_upgrade_versions = value
      end


      if attributes.key?(:'cores_count')
        self.cores_count = attributes[:'cores_count']
      end


      if attributes.key?(:'cpu_family')
        self.cpu_family = attributes[:'cpu_family']
      end


      if attributes.key?(:'datacenter_id')
        self.datacenter_id = attributes[:'datacenter_id']
      end


      if attributes.key?(:'k8s_version')
        self.k8s_version = attributes[:'k8s_version']
      end


      if attributes.key?(:'labels') && (value = attributes[:'labels']).is_a?(Hash)
        self.labels = value
      end


      if attributes.key?(:'lans') && (value = attributes[:'lans']).is_a?(Array)
        self.lans = value
      end


      if attributes.key?(:'maintenance_window')
        self.maintenance_window = attributes[:'maintenance_window']
      end


      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end


      if attributes.key?(:'node_count')
        self.node_count = attributes[:'node_count']
      end


      if attributes.key?(:'public_ips') && (value = attributes[:'public_ips']).is_a?(Array)
        self.public_ips = value
      end


      if attributes.key?(:'ram_size')
        self.ram_size = attributes[:'ram_size']
      end


      if attributes.key?(:'storage_size')
        self.storage_size = attributes[:'storage_size']
      end


      if attributes.key?(:'storage_type')
        self.storage_type = attributes[:'storage_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      


      if @availability_zone.nil?
        invalid_properties.push('invalid value for "availability_zone", availability_zone cannot be nil.')
      end



      if @cores_count.nil?
        invalid_properties.push('invalid value for "cores_count", cores_count cannot be nil.')
      end


      if @cpu_family.nil?
        invalid_properties.push('invalid value for "cpu_family", cpu_family cannot be nil.')
      end


      if @datacenter_id.nil?
        invalid_properties.push('invalid value for "datacenter_id", datacenter_id cannot be nil.')
      end






      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end


      if @node_count.nil?
        invalid_properties.push('invalid value for "node_count", node_count cannot be nil.')
      end



      if @ram_size.nil?
        invalid_properties.push('invalid value for "ram_size", ram_size cannot be nil.')
      end


      if @storage_size.nil?
        invalid_properties.push('invalid value for "storage_size", storage_size cannot be nil.')
      end


      if @storage_type.nil?
        invalid_properties.push('invalid value for "storage_type", storage_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      


      return false if @availability_zone.nil?
      availability_zone_validator = EnumAttributeValidator.new('String', ["AUTO", "ZONE_1", "ZONE_2"])
      return false unless availability_zone_validator.valid?(@availability_zone)


      return false if @cores_count.nil?

      return false if @cpu_family.nil?

      return false if @datacenter_id.nil?





      return false if @name.nil?

      return false if @node_count.nil?


      return false if @ram_size.nil?

      return false if @storage_size.nil?

      return false if @storage_type.nil?
      storage_type_validator = EnumAttributeValidator.new('String', ["HDD", "SSD"])
      return false unless storage_type_validator.valid?(@storage_type)
      true
    end

    


    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability_zone Object to be assigned
    def availability_zone=(availability_zone)
      validator = EnumAttributeValidator.new('String', ["AUTO", "ZONE_1", "ZONE_2"])
      unless validator.valid?(availability_zone)
        fail ArgumentError, "invalid value for \"availability_zone\", must be one of #{validator.allowable_values}."
      end
      @availability_zone = availability_zone
    end















    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] storage_type Object to be assigned
    def storage_type=(storage_type)
      validator = EnumAttributeValidator.new('String', ["HDD", "SSD"])
      unless validator.valid?(storage_type)
        fail ArgumentError, "invalid value for \"storage_type\", must be one of #{validator.allowable_values}."
      end
      @storage_type = storage_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
        annotations == o.annotations &&
        auto_scaling == o.auto_scaling &&
        availability_zone == o.availability_zone &&
        available_upgrade_versions == o.available_upgrade_versions &&
        cores_count == o.cores_count &&
        cpu_family == o.cpu_family &&
        datacenter_id == o.datacenter_id &&
        k8s_version == o.k8s_version &&
        labels == o.labels &&
        lans == o.lans &&
        maintenance_window == o.maintenance_window &&
        name == o.name &&
        node_count == o.node_count &&
        public_ips == o.public_ips &&
        ram_size == o.ram_size &&
        storage_size == o.storage_size &&
        storage_type == o.storage_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [annotations, auto_scaling, availability_zone, available_upgrade_versions, cores_count, cpu_family, datacenter_id, k8s_version, labels, lans, maintenance_window, name, node_count, public_ips, ram_size, storage_size, storage_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Ionoscloud.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
